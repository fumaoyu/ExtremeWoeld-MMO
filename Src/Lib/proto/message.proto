syntax = "proto3";

package SkillBridge.Message;

option csharp_namespace = "SkillBridge.Message";
option cc_enable_arenas = true;

////////////////////////////////////////////////////////////////
//
//  Basic Defines
//
////////////////////////////////////////////////////////////////枚举
enum RESULT
{
	SUCCESS = 0;
	FAILED = 1;
}

enum CHARACTER_TYPE
{
	Player = 0;
	NPC = 1;
	Monster = 2;
}

enum CHARACTER_CLASS
{
	NONE = 0;
	WARRIOR = 1;
	WIZARD = 2;
	ARCHER = 3;
}

enum CHARACTER_STATE
{
	IDLE = 0;
	MOVE = 1;
}

///状态
enum ENTITY_EVENT
{
	NONE = 0;
	IDLE = 1;
	MOVE_FWD = 2;
	MOVE_BACK = 3;
	JUMP = 4;
	RIDE=5;//骑行
}

enum ITEM_TYPE
{
   NORMAL=0;//普通
   NATERIAL=1;
   TASK=2;//任务道具	
   EQUIP=3;//装备
   RIDE=4;///坐骑
}

enum EQUIP_SLOT
{
	WEAPON 		= 0;
	ACCESSORY 	= 1;
	HELMET 		= 2; //头盔
	CHEST 		= 3; //胸甲
	SHOULDER 	= 4; //护肩
	PANTS 		= 5; //裤子
	BOOTS 		= 6; //靴子
	SLOT_MAX	= 7;
}

message NUserInfo {
	int32 id = 1;
	NPlayerInfo player = 2;
}

message NPlayerInfo {
	int32 id = 1;
	repeated NCharacterInfo characters = 2;
}

message NCharacterInfo {
	int32 id = 1;//db id
	int32 config_id = 2;//配置表id比如角色是1， 2， 3  怪物1001,1002等
	int32 entity_id=3; //entity_id  实体id
	string name = 4;
	CHARACTER_TYPE type = 5;
	CHARACTER_CLASS class = 6;
	int32 level = 7;
	int32 exp=8;
	NAttributeDynamic attributeDynamic=9;//动态属性
	int32 mapId = 10;
	NEntity entity = 11;
	int64 gold = 12;

	repeated NItemInfo Items=13;//道具信息,丢这里方便用户登录的时候就可以知道自己身上所有的道具
	NBagInfo Bag=14;//背包
	int32 diamond=15;//钻石
	bytes Equips=16;//装备数据
	repeated NQuestInfo quests=17;//任务信息
	repeated NFriendInfo friends=18;//好友信息

	

	NGuildInfo guild=19;//公会信息
	int32 ride=20;//坐骑id

	repeated NSkillInfo Skills=21;
}

message NAttributeDynamic
{
	int32 HP=1;
 	int32 MP=2;
}


message  NItemInfo
{
	int32 id=1;//单个道具id
	int32 count =2;//单个道具数量
}

message NSkillInfo
{
      int32 id=1;
	  int32 level=2;	
}


message NVector3
{
	int32 x = 1;
	int32 y = 2;
	int32 z = 3;
}

message NBagInfo
{
    int32 Unlocked=1;//解锁的格子
    bytes Items=2;//背包道具，可变长

}
//状态机制，为了方便一个协议发过来，需要返回几个协议，比如购买道具，客户端就一个购买协议过来，服务器需要返回购买是否成功，道具信息变化，金币变化三个协议
enum STATUS_ACTION
{
	UPDATE=0;//状态更新，只是数值变化
	ADD=1;//增加
	DELETE=2;//删除
}

//状态类型
enum STATUS_TYPE
{
	GOLD=0;
	EXP=1;
	SKILL_POINT=2;
	ITEM=3;
	DIAMOND=4;
	LEVEL=5;
}
///暂时不用
enum STATUS_SOURCE
{
	UPDATE=0;
	ADD=1;
	DELETE=2;
}

//用一个通用结构代表游戏类所有可能发生状态的变化
message NStatus
{
	STATUS_TYPE type=1;//比如金币增加一百，type=gold
    STATUS_ACTION action=2;//action=add
	int32 id=3;//gold没有id
	int32 value=4;//value=100
}

//状态通知，一次通知把所有发生状态变化的都加进去
message StatusNotify
{
	repeated NStatus status = 1;
}

////////////////////////////////////////////////////////////////
//
//  Entities
//
////////////////////////////////////////////////////////////////







message NEntity {
	int32 id = 1;
	NVector3 position = 2;
	NVector3 direction = 3;
	int32 speed = 4;
}

message NEntitySync {
	int32 id = 1;
	ENTITY_EVENT event = 2;
	NEntity entity = 3;
	int32 param=4;///
}



////////////////////////////////////////////////////////////////
//
//  Messages
//
////////////////////////////////////////////////////////////////
//根协议一个协议客户端服务端同时使用偷懒
message NetMessage{
	NetMessageRequest Request = 1;//请求客户端填充
	NetMessageResponse Response = 2;//响应服务端填充
}
//客户端请求
message NetMessageRequest{
	UserRegisterRequest userRegister = 1;//后面的值为可选的想发哪个发哪个其他的可以为空
	UserLoginRequest userLogin = 2;
	UserCreateCharacterRequest createChar = 3;
	UserGameEnterRequest gameEnter = 4;
	UserGameLeaveRequest gameLeave = 5;
	
	MapCharacterEnterRequest mapCharacterEnter = 6;

	MapEntitySyncRequest mapEntitySync = 8;
	MapTeleportRequest mapTeleport = 9;
	BagSaveRequest bagSave=10;

	ItemBuyRequest itemBuy=11;

	ItemEquipRequest itemEquip=12;
	//FirstTestRequest firstRequest=10;

	QuestListRequest questList=13;//任务列表
	QuestAcceptRequest questAccept=14;//接收任务
	QuestSubmitRequest questSubmit=15;////完成任务

    FriendAddRequest friendAddReq=16;//添加好友
    FriendAddResponse  friendAddRes=17;//好友添加响应双向交互  
	FriendListRequest   friendList=18;//列表
	FriendRemoveRequest  friendRemove=19;//移除好友

	TeamInviteRequest teamInviteReq= 20;///组队
	TeamInviteResponse teamInviteRes= 21;
	TeamInfoRequest teamInfo= 22;
	TeamLeaveRequest teamLeave= 23;

    GuildCreateRequest guildCreate=24;////公会
	GuildJoinRequest guildJionReq=25;
	GuildJoinResponse guildJoinRes=26;
	GuildRequest guild=27;
	GuildLeaveRequest guildLeave=28;
	GuildListRequest guildList=29;

    GuildAdminRequest  guildAdmin=30;

	ChatRequest chat=31;

	SkillCastRequest skillCast=50;

    //NGuildInfo guild=2

    SenondTestRequest SenondTest=99;
}
//服务端响应
message NetMessageResponse{
	UserRegisterResponse userRegister = 1;
	UserLoginResponse userLogin = 2;
	UserCreateCharacterResponse createChar = 3;
	UserGameEnterResponse gameEnter = 4;
	UserGameLeaveResponse gameLeave = 5;

	MapCharacterEnterResponse mapCharacterEnter = 6;
	MapCharacterLeaveResponse mapCharacterLeave = 7;

	MapEntitySyncResponse mapEntitySync = 8;
	BagSaveResponse bagSave = 9;
	ItemBuyResponse itemBuy=11;
    ItemEquipResponse itemEquip=12;

    QuestListResponse questList=13;
	QuestAcceptResponse questAccept=14;
	QuestSubmitResponse questSubmit=15;//提交任务
    
	FriendAddRequest friendAddReq=16;///好友添加响应双向交互
	FriendAddResponse friendAddRes=17;
	FriendListResponse friendList=18;
	FriendRemoveResponse friendRemove=19;

    TeamInviteRequest teamInviteReq=20;///组队添加响应双向交互
	TeamInviteResponse teamInviteRes=21;
	TeamInfoResponse teamInfo=22;
	TeamLeaveResponse teamLeave=23;


    GuildCreateResponse guildCreate=24;////公会
	GuildJoinRequest guildJionReq=25;
	GuildJoinResponse guildJoinRes=26;
	GuildResponse guild=27;
	GuildLeaveResponse guildLeave=28;
	GuildListResponse guildList=29;

	GuildAdminResponse  guildAdmin=30;

	ChatResponse chat=31;

	SkillCastResponse skillCast=50;
	SkillHitResponse skillHits=51;

    SenondTestRespose SenondTest=98;
	StatusNotify statusNotify=99;
}
message FirstTestRequest {
	string helloworld = 1;
	string datas = 2;

}


// User Protocol
message UserLoginRequest {
	string user = 1;
	string passward = 2;

}

message UserLoginResponse {
	RESULT result = 1;
	string errormsg = 2;
	NUserInfo userinfo = 3;
}


message UserRegisterRequest
{
	string user = 1;
	string passward = 2;
	int32 age=3;
}

message UserRegisterResponse {
	RESULT result = 1;
	string errormsg = 2;
}

message UserCreateCharacterRequest
{
	string name = 1;
	CHARACTER_CLASS class = 2;
}

message UserCreateCharacterResponse {
	RESULT result = 1;
	string errormsg = 2;
	repeated NCharacterInfo characters = 3;
}

message UserGameEnterRequest
{
	int32 characterIdx = 1;
}

message UserGameEnterResponse {
	RESULT result = 1;
	string errormsg = 2;
	
	NCharacterInfo character=3;//用户进入游戏返回角色所有的信息
}

message UserGameLeaveRequest
{
}

message UserGameLeaveResponse {
	RESULT result = 1;
	string errormsg = 2;
}

// Map Protocol
message MapCharacterEnterRequest
{
	int32 mapId = 1;
}

message MapCharacterEnterResponse
{
	int32 mapId = 1;
	repeated NCharacterInfo characters = 2;
}

message MapCharacterLeaveResponse
{
	int32 entityId = 1;
}


message MapEntitySyncRequest
{
    NEntitySync entitySync = 1;
}


message MapEntitySyncResponse
{
    repeated NEntitySync entitySyncs = 2;
}

message MapTeleportRequest
{
	int32 teleporterId = 1;
}

message ItemBuyRequest
{
   int32 shopId=1;
   int32 shopItemId=2;
   int32 buyCount=3;
   int32 payType=4;	
}

message ItemBuyResponse
{
	RESULT result=1;
	string errormsg=2;
}

//背包保存发送客户端用
message 	BagSaveRequest
{
      NBagInfo BagInfo=1;	
}

//响应服务端用
message BagSaveResponse
{
    RESULT result=1;
	string errormsg =2;	
}

message ItemEquipRequest
{
    int32 slot=1;//装备槽子id
	int32 itemId=2;//装备iID
	bool isEquip=3;
}
message ItemEquipResponse
{
   RESULT result=1;
   string errormsg=2;	
}

//QuestSystem

enum QUEST_STATUS//任务状态
{
   IN_PROGRESS=0;//已经接受，未完成
   COMPLATED=1;//已完成，未提交
   FINISHED=2;//已完成，已提交
   FAILED=3;//以失败

}
enum QUEST_LIST_TYPE//任务列表类型，不一定用得着
{
	ALL=0;//所有
	IN_PROGRESS =1;//进行中
	FINISHED=2;//完成
}

//任务
message NQuestInfo
{
   int32 quest_id=1;//任务id
   int32 quest_guid=2;//唯一id，对应数据库里面的id，,万一有那种循环同一个任务
   QUEST_STATUS status=3;
   repeated int32 targets=4;

}

///任务列表
message QuestListRequest
{ 
	QUEST_LIST_TYPE listType=1;//请求默认所有任务

}

message QuestListResponse
{
	RESULT result =1;
    string errormsg=2;
	repeated NQuestInfo quests=3;//任务内容信息
}

//接收任务
message QuestAcceptRequest
{
   int32 quest_id=1;
}
message QuestAcceptResponse
{
	RESULT result=1;
	string errormsg=2;
	NQuestInfo quest=3;//任务信息
}



message QuestSubmitRequest
{
	int32 quest_id=1;
}

message QuestSubmitResponse
{
	RESULT result=1;
	string errormsg=2;
	NQuestInfo quest=3;//任务信息
}


message QuestAbandonRequest
{
    int32 quest_id=1;
}

message 	QuestAbandonResponse
{
	RESULT result=1;
	string errormsg=2;
}


///////Friend System
message NFriendInfo
{
	int32 id=1;
	NCharacterInfo friendInfo=2;
	int32 status=3;
}

message FriendAddRequest
{
	int32 from_id=1;///我是谁
	string from_name=2;
	int32 to_id=3;///加谁
	string to_name=4;//两个只存在一个可能
}

message  FriendAddResponse
{
	RESULT result=1;
	string errormsg=2;
	FriendAddRequest request=3;///
}

message FriendListRequest
{

}

message FriendListResponse
{
	RESULT result=1;
	string errormsg=2;
    repeated NFriendInfo friends=3;
}

message FriendRemoveRequest
{
	int32 id=1;
	int32 friendId=2;
}

message FriendRemoveResponse
{
	RESULT result=1;
	string errormsg=2;
	int32 id=3;
}


/////TeamSystem
message NTeamInfo
{
	int32 id=1;
	int32 leader=2;///队长
	repeated NCharacterInfo nembers=3;///成员
} 

 message TeamInviteRequest
 {
    int32	team_id=1;////队伍id
	int32   from_id=2;
	string from_name=3;
	int32 to_id=4;
	string to_name=5;
 }

message TeamInviteResponse
{
	RESULT result=1;
	string errormsg=2;
	TeamInviteRequest request=3;////为了在整个添加请求和相应过程中为了数据方便管理，直接加进去
}

///预留
message TeamInfoRequest
{

}

message TeamInfoResponse
{
	RESULT result=1;
	string errormsg=2;
	NTeamInfo team=3;
}

message TeamLeaveRequest
{
	int32 team_id=1;
	int32 characterId=2;
}

message TeamLeaveResponse
{
	RESULT result=1;
	string errormsg=2;
	int32 characterId=3;
}

///Guild System

enum GUILD_TITLE///职位
{
	NONE=0;
	PRESIDENT=1;///会长
	VICE_PRESIDENT=2;///副会长
}

///申请结果
enum APPLY_RESULT
{
   NONE=0;
   ACCEPT=1;
   REJECT=2;
}

message NGuildInfo
{
	int32 id=1;
	string guild_name=2;//公会名字
	int32 leaderId=3;
	string leaderName=4;///会长
	string notice=5;///公会公告
	int32 memberCount=6;
	repeated NGuildMemberInfo members=7;///成员信息
	repeated NGuildApplyInfo applys=8;///申请加入信息
	int64 createTime=9;
}

message	NGuildMemberInfo
{
    int32 id=1;
	int32 characterId=2;///id
	GUILD_TITLE TITLE=3;//职位
	NCharacterInfo info=4;///角色信息
	int64 joinTime=5;//加入时间
	int64 lastTime=6;///上次在线时间
	int32 status=7;///在线状态
}

///公会申请信息 
message NGuildApplyInfo
{
	int32 guild_id=1;
	int32 characterId=2;
	string name=3;
	int32 class=4;
	int32 level=5;
	APPLY_RESULT result=6;
}

///创建公会
message GuildCreateRequest
{
	string guild_name=1;
	string guild_notice=2;

}

message GuildCreateResponse
{
	RESULT result=1;
	string errormsg=2;
	NGuildInfo guildInfo=3;
}

///加入工會申請[member->server->leader]
message GuildJoinRequest
{
	NGuildApplyInfo apply=1;
}

///加入工會响应[server->member]
message GuildJoinResponse
{
	RESULT result=1;
	string errormsg=2;
	NGuildApplyInfo apply=3;
}

///公会列表
message GuildListRequest
{

}

message GuildListResponse
{

   RESULT result=1;
   string errormsg=2;
   repeated NGuildInfo guilds=3;
}

///公会信息
message GuildRequest
{

}

message GuildResponse
{
   RESULT result=1;
   string errormsg=2;
   NGuildInfo guildInfo=3;
}

///离开公会
message GuildLeaveRequest
{

}

message GuildLeaveResponse
{
   RESULT result=1;
   string errormsg=2;
  
}

///公会管理
 enum GUILD_ADMIIN_COMMAND
{
	KICKOUT=1;///踢人
	PROMOTE=2;//晋升
	DEPOST=3;///罢免
	TRANSFER=4;///转让会长
}

message GuildAdminRequest
{
	GUILD_ADMIIN_COMMAND command=1;
	int32 target=2;

}

message GuildAdminResponse
{
   RESULT result=1;
   string errormsg=2;
   GuildAdminRequest command=3;
}


///聊天系统
enum CHAT_CHANNEL///////////频道，这么设计是为了每一个频道都可以得到2的n次方，任意频道都可以组合，二进制每一位都只有一个1，在不同位置上，与也是不一样的
{
	ALL=-1;
	LOCAL=1;
	WORLD=2;
	SYSTEM=4;
	PRIVATE=8;
	TEAM=16;
	GUILD=32;
}

message ChatMessage
{
   CHAT_CHANNEL channel=1;////聊天频道
   int32 id=2;//////信息id
   int32 form_id=3;
   string from_name=4;
   int32 to_id=5;
   string to_name=6;
   string message=7;////信息内容
   double time=8;	
}

message ChatRequest
{
	ChatMessage chatMessage=1;
}

message ChatResponse 
{
	RESULT result=1;
	string errormsg=2;
	repeated ChatMessage localMessage=3;
	repeated ChatMessage worldMessage=4;
	repeated ChatMessage systemMessage=5;
	repeated ChatMessage privateMessage=6;
	repeated ChatMessage teamMessage=7;
	repeated ChatMessage guildMessage=8;

}

///自己写的测试
message SenondTestRequest
{
  int32 id=1;
  
}

message SenondTestRespose
{
  RESULT result=1;
  string sName=2;	
}

///////////Battle
// enum SkillType
// {
   //     Normal=1;
   //     Skill=2;

  //  }
// enum TargetType
  //  {
	////	None=1;
     //   Target=2;  
    //    self=3;
   //     Position=4;
  //  }

enum SKILL_RESULT
    {
        OK=0;  ////成功
		OUT_OF_MP=1;     ///本地		      /// <summary>
        COOL_DOWN=2;     ///冷却中
        INVALID_TARGET=3;   ///无效目标
        OUT_PF_RANGE=4;///目标超出范围
        CASTING=5;    //技能正在释放中
    }

enum  SKILL_STATUS
{
		NONE=0;
		CASTING=1;  //施法中
		RUNNING=2;///执行中
}
	message NSkillCastInfo
	{
		int32 skillId=1;//技能id
		int32 casterId=2;///施法者
		int32 targetId=3;//目标
		NVector3 position=4;//点
	}
message NDamageInfo
{
	int32  entityID=1;///entityId
	int32  damage=2;//伤害
	bool crit=3;//暴击
	bool will_dead=4;  //此次伤害之后是否死亡
}

message NSkillHitInfo
{
	int32 skillId=1;
	int32 casterId=2;
	int32 hitId=3;
	repeated  NDamageInfo damages=4;
}

	message SkillCastRequest
	{
		NSkillCastInfo castInfo=1;
	}

	message SkillCastResponse
	{
		RESULT result=1;
		string errormsg=2;
		NSkillCastInfo castInfo=3;
		NDamageInfo damage=4;
	}

	message  SkillHitResponse
	{
		RESULT result=1;
		string errormsg=2;
		repeated NSkillHitInfo hits=3;
	}


	 